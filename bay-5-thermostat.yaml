substitutions:
 esp_name: "Bay 5"  
esphome:
  name: bay-5-thermostat
esp8266:
  board: nodemcuv2
logger:
api:
  encryption:
    key: "A3YEnawERMRowv+h19i6QTFz0glyGkCq1iqTHQe1h/k="
ota:
  password: "fb08a79e73e9f0156557a487a09559cf"
wifi:
  ssid: "Plant Factory ATT "
  password: !secret wifi_password  
  ap:
    ssid: "${esp_name}"
    password: ""
captive_portal:
globals: 
  - id: wifi_connection
    type: bool
    restore_value: no
    initial_value: "false"
time:
  - platform: homeassistant
    id: ntp
switch:
  - platform: gpio
    name: "${esp_name} Overide Switch"
    id: "relay1"
    pin: 4
    internal: true
    restore_mode: RESTORE_DEFAULT_OFF
  - platform: template
    name: "${esp_name} OLED"
    optimistic: true
    turn_on_action:
      - lambda: id(oled).turn_on();
    turn_off_action:
      - lambda: id(oled).turn_off();
    restore_state: true
climate:
  - platform: bang_bang
    name: "${esp_name} Thermostat"
    id: thermo1
    icon: mdi:fire
    sensor: temp1
    default_target_temperature_low: 66 °F
    default_target_temperature_high: 68 °F
    heat_action:
      - switch.turn_on: relay1
    idle_action:
      - switch.turn_off: relay1
sensor:
  - platform: dht
    pin: 5
    temperature:
      id: "temp1"
      name: "${esp_name} Temperature"
      filters: 
        offset: -0.95
    humidity:
      name: "${esp_name} Humidity"
      id: "humid1"
    update_interval: 15s
#lambda filters
  - platform: template
    name: C to F
    id: temp2
    lambda: return id(temp1).state * 1.8+32;
    update_interval: 15s
    internal: true
  - platform: template 
    name: "${esp_name} Target Temperature High"
    id: set_high
    icon: mdi:temperature-chevron-up
    update_interval: 15s
    lambda: return id(thermo1).target_temperature_high * 1.8+32;
  - platform: template 
    name: "${esp_name} Target Temperature Low"
    id: set_low
    icon: mdi:temperature-chevron-down
    update_interval: 15s
    lambda: return id(thermo1).target_temperature_low * 1.8+32;
## Wifi
  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    name: "${esp_name} WiFi dB"
    id: wifi_db
    update_interval: 30s
    entity_category: "diagnostic"
#WiFi signal strength in %
  - platform: copy 
    source_id: wifi_db
    id: wifi_sig
    name: "${esp_name} WiFi Percent"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: "diagnostic"
# Temp vs target Graph    
graph:
  - id: gph1
    duration: 3h
    x_grid: 30min
    y_grid: 2.0     # degC/div
    width: 126
    height: 46
    traces:
      - sensor: temp2
        line_type: SOLID
        line_thickness: 2
      - sensor: set_low
        line_type: DASHED
        line_thickness: 1
      - sensor: set_high
        line_type: DASHED
        line_thickness: 1
interval:
  - interval: 8s
    then:
      - display.page.show_next: oled
#      - component.update: oled
  - interval: 15s
    then:
      - if:
          condition:
            wifi.connected:
          then:
            - lambda: |-
                id(wifi_connection) = true;
          else:
            - lambda: |-
                id(wifi_connection) = false;
font:
  - file: 'arial.ttf'
    id: font1
    size: 11
  - file: 'BebasNeue-Regular.ttf'
    id: font2
    size: 36
  - file: 'arial.ttf'
    id: font3
    size: 16
  - file: "fonts/mdi.ttf"
    id: mdi2
    size: 40
    glyphs: [
      "\U000F05A9", #wifi
      "\U000F05AA", #no wifi
      ]
i2c:
  sda: 14
  scl: 12
  scan: false
display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    id: oled
    reset_pin: 0
    address: 0x3C
    rotation: 0
    pages:
      - id: page1
        lambda: |-

          it.strftime(85, 1, id(font3), "%H:%M", id(ntp).now());

          if (id(relay1).state) {
          it.print(13, 1, id(font3), "Heating");
          } else {
          it.print(22, 1, id(font3), "Idle");
          }

          

          it.line(0, 19, 128, 19);
          it.line(83, 19, 83, 0);
          it.line(64, 19, 64, 64);
          it.rectangle(0, 0, 128, 64);
          it.printf(1, 50, id(font2), TextAlign::BASELINE_LEFT, "%.1f°", id(set_low).state);
          it.printf(7, 50, id(font1), "KICK ON");
          it.printf(65, 18, id(font2), "%.1f°", id(set_high).state);
          it.printf(70, 50, id(font1), "CUT OFF");
      - id: page2
        lambda: |-
          it.graph(2, 12, id(gph1));
          it.print(18, 0, id(font1), "3hr Temp History");
          it.rectangle(0, 0, 128, 64);
      - id: page3
        lambda: |-
          it.strftime(85, 0, id(font3), "%H:%M", id(ntp).now());
          
          it.printf(88, 25, id(mdi2), "%s", id(wifi_connection) ? "\U000F05A9" : "\U000F05AA");

          it.printf(1, 0, id(font3), "%.1f°F %.0f%% ", id(temp2).state, id(humid1).state);
          it.print(9, 14, id(font3), "Currently");

          it.line(0, 33, 84, 33);
          it.line(84, 64, 84, 0);
          it.line(84, 18, 128, 18);
          it.rectangle(0, 0, 128, 64);

          it.print(15, 34, id(font1), "Use app to");
          it.print(3, 49, id(font1), "Change Target");